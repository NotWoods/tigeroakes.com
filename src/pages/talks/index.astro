---
import { DefaultMap } from '@notwoods/default-map';
import {
  getCollection,
  getEntry,
  type ValidContentEntrySlug,
} from 'astro:content';
import BannerNav from '../../components/BannerNav.astro';
import Footer from '../../components/Footer.astro';
import Tags from '../../components/article/Tags.astro';
import ItemImage from '../../components/lists/ItemImage.astro';
import ItemTitle from '../../components/lists/ItemTitle.astro';
import ListConferences, {
  type Conference,
} from '../../components/lists/ListConferences.astro';
import PostsHeader from '../../components/lists/PostsHeader.astro';
import SectionTitle from '../../components/lists/SectionTitle.astro';
import MainHead from '../../components/meta/MainHead.astro';
import {
  accentStyles,
  comparePosts,
  postAccentColor,
} from '../../scripts/posts';
import { getConferenceName, type TalkBacklink } from '../../scripts/talks';
import * as header from './_index.md';

async function getConferences(): Promise<{
  future: readonly Conference[];
  past: readonly Conference[];
  talkBacklinks: ReadonlyMap<
    ValidContentEntrySlug<'talks'>,
    readonly TalkBacklink[]
  >;
}> {
  const talkBacklinks = new DefaultMap<
    ValidContentEntrySlug<'talks'>,
    TalkBacklink[]
  >(() => []);

  const confEntries = await getCollection('conferences');
  confEntries.sort(comparePosts);
  const conferences = await Promise.all(
    confEntries.map(async (conf) => {
      const name = getConferenceName(conf);

      let location = conf.data.location;
      if (!location) {
        if (conf.data.remote) {
          location = 'Online';
        } else {
          throw new Error(`Missing location for conference ${conf.id}`);
        }
      }

      let talk: { title: string; href?: string } | undefined;
      if (conf.data.talk) {
        let title = conf.data.talk.title;
        let href: string | undefined;
        if (conf.data.talk.ref) {
          const talkEntry = await getEntry(conf.data.talk.ref);
          title ||= talkEntry.data.title;
          href = `./${talkEntry.slug}/`;

          talkBacklinks.get(talkEntry.slug).push({
            conference: conf.id,
            name,
          });
        }

        if (!title) {
          throw new Error(`Missing title for talk in conference ${conf.id}`);
        }

        talk = { title, href };
      }

      return {
        id: conf.id,
        future: conf.data.date.valueOf() > Date.now(),
        type: conf.data.type,
        name,
        link: conf.data.link,
        date: conf.data.date,
        remote: conf.data.remote,
        location,
        talk,
      };
    })
  );

  return {
    future: conferences.filter((conf) => conf.future),
    past: conferences.filter((conf) => !conf.future),
    talkBacklinks,
  };
}

const conferences = await getConferences();

const talkEntries = await getCollection('talks');
talkEntries.sort(comparePosts);
const talks = talkEntries.map((post) => ({
  id: post.slug,
  title: post.data.title,
  href: `./${post.slug}/`,
  date: post.data.date,
  pictureSrc: post.data.banner,
  pictureAlt: post.data.banner_alt,
  tags: post.data.tags,
}));
---

<html lang="en">
  <head>
    <MainHead
      title={header.frontmatter.title}
      description={header.frontmatter.description}
      defaultSocial
    />
  </head>

  <body class="bg-slate-800 text-slate-200">
    <BannerNav current={Astro.url} />

    <PostsHeader links={header.frontmatter.links}>
      <header.Content />
    </PostsHeader>

    <section class="safe-px-4 mx-auto max-w-site">
      <SectionTitle class="mb-4" id="where-ive-presented"
        >Where I've presented</SectionTitle
      >

      <ListConferences future={conferences.future} past={conferences.past} />
    </section>

    <section class="safe-px-4 mx-auto max-w-site">
      <SectionTitle class="mb-4" id="talks-ive-given"
        >Talks I've given</SectionTitle
      >
      <div
        class="mb-8 grid grid-cols-1 gap-12 sm:grid-cols-2"
        style="--block-scale: 0.5"
      >
        {
          talks.map((item) => {
            const backlinks = conferences.talkBacklinks.get(item.id) ?? [];
            return (
              <article
                class="flex flex-col"
                style={accentStyles(postAccentColor(item.tags))}
              >
                {item.pictureSrc && (
                  <ItemImage
                    src={item.pictureSrc}
                    alt={item.pictureAlt}
                    width={376}
                    aspect="video"
                    loading="lazy"
                    sizes="(max-width: 640px) 95vw, 376px"
                  />
                )}
                {backlinks.length > 0 && (
                  <p class="text-sm opacity-80">
                    First presented at{' '}
                    <a
                      class="hover:underline"
                      href={`#${backlinks[0].conference}`}
                    >
                      {backlinks[0].name}
                    </a>
                  </p>
                )}
                <ItemTitle href={item.href}>{item.title}</ItemTitle>
                <Tags class="mt-auto text-sm" tags={item.tags} />
              </article>
            );
          })
        }
      </div>
    </section>

    <Footer />
  </body>
</html>
