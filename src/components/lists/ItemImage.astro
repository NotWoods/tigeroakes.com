---
import Image, { generateObject } from '@11ty/eleventy-img';
import { basename, dirname, extname } from 'path';

export interface Props {
  src: string;
  alt?: string;
  height: number;
  class?: string;
  fit?: 'cover' | 'contain';
}

const { src, alt = '', fit, height, class: className } = Astro.props as Props;
const width = height * 2;
const imgClass = fit === 'contain' ? 'object-contain' : 'object-cover';

const metadata = await Image(src, {
  outputDir: 'static/assets/images',
  urlPath: '/assets/images',
  widths: [width],
  formats: ['avif', 'webp', 'png'],
  svgShortCircuit: true,
  sharpWebpOptions: { quality: 90 },
  sharpAvifOptions: { quality: 90 },
  filenameFormat(id: string, src: string, width: string, format: string) {
    const parentFolder = basename(dirname(src));
    const fileName = basename(src, extname(src));
    return `${parentFolder}-${fileName}-${width}.${id}.${format}`;
  }
});

type ImgTag = { img: Record<string, string> };
type SourceTag = { source: { type: string, srcset: string, sizes?: string } };
type PictureTag = { picture: [...SourceTag[], ImgTag] };

function isImg(tag: ImgTag | SourceTag | PictureTag): tag is ImgTag {
  return Boolean((tag as ImgTag).img);
}

const tag = generateObject(metadata, {
  alt,
  loading: 'lazy',
  decoding: 'async',
}) as ImgTag | PictureTag;
---

<picture class:list={[`block mb-2 shadow-md aspect-w-2 aspect-h-1`, className]}>
  {isImg(tag)
    ? <img {...tag.img} class={imgClass} {alt} />
    : tag.picture.map(tag => isImg(tag)
      ? <img {...tag.img} class={imgClass} {alt} />
      : <source {...tag.source} />)}
</picture>
