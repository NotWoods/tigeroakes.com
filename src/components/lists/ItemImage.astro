---
import { Image, getImage } from 'astro:assets';

export interface Props {
  src: ImageMetadata | Promise<{ default: ImageMetadata }>;
  alt?: string;
  width: number;
  sizes: string;
  class?: string;
  fit?: 'cover' | 'contain';
  loading?: 'eager' | 'lazy';
  aspect: 'half' | 'video';
}

function getDefault(src: ImageMetadata | { default: ImageMetadata }) {
  if ('default' in src) {
    return src.default;
  }
  return src;
}

const {
  src,
  alt = '',
  fit,
  width,
  aspect,
  sizes,
  loading = 'lazy',
  class: className,
} = Astro.props as Props;
const imgClass = [
  fit === 'contain' ? 'object-contain' : 'object-cover',
  'shadow-md bg-slate-200 h-full',
  className,
]
  .filter(Boolean)
  .join(' ');
const pictureClass =
  aspect === 'half'
    ? 'aspect-w-2 aspect-h-1 mb-2'
    : 'aspect-w-16 aspect-h-9 mb-2';

const metadata = getDefault(await src);

const formats =
  metadata.format === 'svg' ? ['svg'] : ['avif', 'webp', metadata.format];
const widths = [width, width * 2, width * 4];

const sources = await Promise.all(
  formats.map(async (format) => {
    const sourceSet = await Promise.all(
      widths.map(async (width) => {
        const image = await getImage({ src: metadata, width, format });
        return `${image.src} ${width}w`;
      })
    );

    let type = `image/${format}`;
    if (format === 'svg') {
      type = 'image/svg+xml';
    }

    return { format, sourceSet, type };
  })
);
---

<picture class={pictureClass}>
  {
    sources.map(({ sourceSet, type }) => (
      <source type={type} srcset={sourceSet.join(', ')} sizes={sizes} />
    ))
  }
  <Image src={metadata} alt={alt} loading={loading} class={imgClass} />
</picture>
