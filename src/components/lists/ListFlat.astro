---
import type { Temporal } from '@js-temporal/polyfill';
import { accentStyles } from '../../scripts/posts';
import Time from '../article/Time.astro';
import ItemImage from './ItemImage.astro';
import ItemTitle from './ItemTitle.astro';
import SectionTitle from './SectionTitle.astro';

export interface Props {
  title?: string;
  items: readonly Item[];
  collection: 'posts' | 'projects' | 'talks';
}

export interface Item {
  title: string;
  href: URL | string;
  date?: Temporal.PlainDate;

  pictureSrc?: ImageMetadata | Promise<{ default: ImageMetadata }>;
  pictureAlt?: string;
  pictureFit?: 'cover' | 'contain';
  accent?: string;
}

function formatType(collection: 'posts' | 'projects' | 'talks', item: Item) {
  const suffix = item.date ? ' | ' : '';
  switch (collection) {
    case 'posts':
      return `Blog post${suffix}`;
    case 'projects':
      return `Project${suffix}`;
    case 'talks':
      return `Talk${suffix}`;
  }
}

const { title, items, collection } = Astro.props as Props;
---

{title && <SectionTitle>{title}</SectionTitle>}
<ul class="mt-4">
  {
    items.map((item) => (
      <li class="clear-both mb-4" style={accentStyles(item.accent)}>
        {item.pictureSrc && (
          <div class="float-right mt-2">
            <ItemImage
              class="w-[5.875rem]"
              sizes="5.875rem"
              src={item.pictureSrc}
              alt={item.pictureAlt}
              width={94}
              aspect="half"
            />
          </div>
        )}
        <p class="text-sm">
          {formatType(collection, item)}
          {item.date && <Time date={item.date} />}
        </p>
        <ItemTitle href={item.href}>{item.title}</ItemTitle>
      </li>
    ))
  }
</ul>
