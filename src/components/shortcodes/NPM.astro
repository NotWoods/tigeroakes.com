---
import { Temporal } from '@js-temporal/polyfill';
import ExternalLink from './ExternalLink.astro';

export interface Props {
  pkg: string;
  start?: `${number}-${number}-${number}`;
}

const { pkg, start } = Astro.props as Props;

const formatter = new Intl.NumberFormat('en-US');

async function queryJson() {
  const now = Temporal.Now.plainDateISO().toString();
  const response = await fetch(
    `https://api.npmjs.org/downloads/point/${start}:${now}/${pkg}`
  );
  const json = await response.json();

  const { downloads: count } = json as { downloads: number };
  if (count > 1000) {
    return { count: Math.floor(count / 1000) * 1000, rounded: true };
  } else {
    return { count, rounded: false };
  }
}
const { count, rounded } = await queryJson();
---

<ExternalLink href={`https://www.npmjs.com/package/${pkg}`}>
  <Fragment slot="icon">
    <svg class="float-right" viewBox="0 0 18 7" height="20" width="51">
      <title>npm</title>
      <path
        fill="#CB3837"
        d="M0,0h18v6H9v1H5V6H0V0z M1,5h2V2h1v3h1V1H1V5z M6,1v5h2V5h2V1H6z M8,2h1v2H8V2z M11,1v4h2V2h1v3h1V2h1v3h1V1H11z"
      ></path>
      <polygon fill="#FFFFFF" points="1,5 3,5 3,2 4,2 4,5 5,5 5,1 1,1 "
      ></polygon>
      <path fill="#FFFFFF" d="M6,1v5h2V5h2V1H6z M9,4H8V2h1V4z"></path>
      <polygon
        fill="#FFFFFF"
        points="11,1 11,5 13,5 13,2 14,2 14,5 15,5 15,2 16,2 16,5 17,5 17,1 "
      ></polygon>
    </svg>
  </Fragment>
  <Fragment slot="title">{pkg}</Fragment>
  <Fragment slot="about">
    Downloads: {formatter.format(count)}{rounded && '+'}
  </Fragment>
</ExternalLink>
