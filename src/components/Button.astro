---
export interface Props {
  href?: string | URL;
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  /**
   * Indicates this is an icon button
   */
  title?: string;
}

const { class: className, ...props } = Astro.props as Props;
const classes = ['button relative shadow-sm text-center whitespace-nowrap'];
if (!props.title) {
  classes.push('px-6 py-2');
}
classes.push(className);
---

{props.href
  ? <a {...props} class:list={classes}><slot /></a>
  : <button type="button" {...props} class:list={classes}><slot /></button>}

<style is:global>
  .button::after {
    @apply absolute inset-0 border-2 border-current shadow-md;
    content: "";
    opacity: 0;
  }
  .button:hover::after,
  .button:focus::after {
    opacity: 1;
  }
  .button:active::after {
    opacity: 0.5;
  }

  @media (prefers-reduced-motion: no-preference) {
    .button::after {
      @apply transition-opacity;
    }
  }
</style>
